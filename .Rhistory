x<-4*0.75
x
#Number5
first_string1<- "AAGGCCTTAGGCGGTTTCC"
first_string1
first_string1<-substring("AAGGCCTTAGGCGGTTTCC", 9, 15)
first_string1
#number5.2
sub(pattern="C", replacement="A", x=first_string1)
#Number6
month_data<-factor(c("April", "January", "December", "September", "November", "July", "July", "June"))
month_data
levels (x=month_data)
all_month<-factor(c("Janury", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"))
all_month
levels(x=all_month)
new_month_data<-factor(c(month_data), levels=all_month)
new_month_data
#Number7
data_sample1<-list(seq(from=-4, to=4, length.out = 20), matrix(c(F,T,T,T,F,T,T,F,F), nrow = 3, ncol = 3, byrow = FALSE), character<-c("Pro", "Asp"), factor<-c("LOW", "MED", "LOW", "MED","MED", "HIGH"))
data_sample1
#7.1 I do not understand the question.
#7.2
character<-c("Pro", "Asp")
character
sub(pattern = "Pro", replacement = "P", x=character)
sub(pattern = "Asp", replacement = "D", x=character)
character_1<-sub(pattern = "Pro", replacement = "P",x=character)
character_1
character_2<-sub(pattern = "Asp", replacement = "D",x=character_1)
character_2
data_sample1<-list(seq(from=-4, to=4, length.out = 20), matrix(c(F,T,T,T,F,T,T,F,F), nrow = 3, ncol = 3, byrow = FALSE), character_2, factor<-c("LOW", "MED", "LOW", "MED","MED", "HIGH"))
data_sample1
#7.3
data_sample1[[1]]
data_sample1[[1]]>1
data_sample1[[1]][data_sample1[[1]]>1]
#Number8
data_set1<-data.frame(Professor=c("Stanislaus", "Francis", "Stephen", "Roger"), Gender=factor(c("M", "F", "M", "M")), Rank=factor(c("Associate", "Associate", "Assistant", "Full")))
data_set1
#8.1
data_set1<-data.frame(Professor=c("Stanislaus", "Francis", "Stephen", "Roger"), Gender=factor(c("M", "F", "M", "M")), Rank=factor(c("Associate", "Associate", "Assistant", "Full")), Age=c(41,43, 15, 1600))
data_set1
#8.2
data_set1<-data.frame(Professor=data_set1[4,1], Age=data_set1[4,4])
data_set1
#Number9
datasets::ChickWeight
ChickWeight[1:13,]
#Number10
chickenResistance<-read.table(file="/Users/arifinabintarti/Downloads/20170912_chickenResistance.txt", header = TRUE, sep = ",", na.strings = "?", stringsAsFactors = FALSE)
chickenResistance
chickenResistance[chickenResistance$subspecies=="WLH" & chickenResistance$gender=="F",]
#Number11
write.table(x=chickenResistance, file="/Users/arifinabintarti/Downloads/chickenResistance_WLH_F.txt",sep = "", na="NA", quote = TRUE, row.names = TRUE)
#Number3
first_string<-"ATGCCCGTTTATAT\nATG\nT
first_string
#Number4
x<-4
x<-0.75
x<-4*0.75
x
#Number5
first_string1<- "AAGGCCTTAGGCGGTTTCC"
first_string1
first_string1<-substring("AAGGCCTTAGGCGGTTTCC", 9, 15)
first_string1
#number5.2
sub(pattern="C", replacement="A", x=first_string1)
#Number6
month_data<-factor(c("April", "January", "December", "September", "November", "July", "July", "June"))
month_data
levels (x=month_data)
all_month<-factor(c("Janury", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"))
all_month
levels(x=all_month)
new_month_data<-factor(c(month_data), levels=all_month)
new_month_data
#Number7
data_sample1<-list(seq(from=-4, to=4, length.out = 20), matrix(c(F,T,T,T,F,T,T,F,F), nrow = 3, ncol = 3, byrow = FALSE), character<-c("Pro", "Asp"), factor<-c("LOW", "MED", "LOW", "MED","MED", "HIGH"))
data_sample1
#7.1 I do not understand the question.
#7.2
character<-c("Pro", "Asp")
character
sub(pattern = "Pro", replacement = "P", x=character)
sub(pattern = "Asp", replacement = "D", x=character)
character_1<-sub(pattern = "Pro", replacement = "P",x=character)
character_1
character_2<-sub(pattern = "Asp", replacement = "D",x=character_1)
character_2
data_sample1<-list(seq(from=-4, to=4, length.out = 20), matrix(c(F,T,T,T,F,T,T,F,F), nrow = 3, ncol = 3, byrow = FALSE), character_2, factor<-c("LOW", "MED", "LOW", "MED","MED", "HIGH"))
data_sample1
#7.3
data_sample1[[1]]
data_sample1[[1]]>1
data_sample1[[1]][data_sample1[[1]]>1]
#Number8
data_set1<-data.frame(Professor=c("Stanislaus", "Francis", "Stephen", "Roger"), Gender=factor(c("M", "F", "M", "M")), Rank=factor(c("Associate", "Associate", "Assistant", "Full")))
data_set1
#8.1
data_set1<-data.frame(Professor=c("Stanislaus", "Francis", "Stephen", "Roger"), Gender=factor(c("M", "F", "M", "M")), Rank=factor(c("Associate", "Associate", "Assistant", "Full")), Age=c(41,43, 15, 1600))
data_set1
#8.2
data_set1<-data.frame(Professor=data_set1[4,1], Age=data_set1[4,4])
data_set1
#Number9
datasets::ChickWeight
ChickWeight[1:13,]
#Number10
chickenResistance<-read.table(file="/Users/arifinabintarti/Downloads/20170912_chickenResistance.txt", header = TRUE, sep = ",", na.strings = "?", stringsAsFactors = FALSE)
chickenResistance
chickenResistance[chickenResistance$subspecies=="WLH" & chickenResistance$gender=="F",]
#Number11
write.table(x=chickenResistance, file="/Users/arifinabintarti/Downloads/chickenResistance_WLH_F.txt",sep = "", na="NA", quote = TRUE, row.names = TRUE)
first_string
#Number3
first_string<-"ATGCCCGTTTATAT\nATG\n"
first_string
#2.1
array
#2.1
sample_data3<-c(array(c(sample_data1,sample_data2), c(2,2,3))
sample_data3
#2.1
sample_data3<-c(array(c(sample_data1,sample_data2), c(2,2,3)))
sample_data3
#2.1
array(c(sample_data1,sample_data2), c(2,2,3))
sample_data3<-(array(c(sample_data1,sample_data2), c(2,2,3)))
sample_data3
#2.1
sample_data3[sample_data3<=6]
#2.1
sample_data3[sample_data3<=6]/2+4
#2.2
sample_data3[sample_data3]+2
#2.2
sample_data4<-[sample_data3]+2
#2.2
sample_data4<-(sample_data3)+2
sample_data4
sample_data4[sample_data4<=6]/2+4
x <- a +b
a <- 3
b <- 6
x <- a +b
a <- 3
b <- 4
a == b
a>=b
a+b
if (grepl(pattern = seq_motif, x=gene2)) {
cat("Sequence motif was found.")
} else {
cat("Sequence motif was not found.")
if (grepl(pattern = seq_motif_RC, x=gene2)) {
cat("sequence motif reverse complement was found.")
}
}
seq_motif <- "AGATCAG"
seq_motif_RC <- "CTGATCT"
gene <- "AGCGTGTGAAGATCAGAGTTTCTGATCT"
gene2 <- "GCGATGTGAAGATCTGATCTAAAATTC"
if (grepl(pattern = seq_motif, x=gene2)) {
cat("Sequence motif was found.")
} else {
cat("Sequence motif was not found.")
if (grepl(pattern = seq_motif_RC, x=gene2)) {
cat("sequence motif reverse complement was found.")
}
}
reference_seq <- "AAAAAAAAAAAAAAAAAAAAA"
exp_seq <- "AAAAAAAAAAGAAAAAAAAA"
snp_position <-11
reference_nucleotide <- substr(reference_seq, 11, 11)
exp_nucleotide <- substr(exp_seq, 11, 11)
reference_seq <- "AAAAAAAAAAAAAAAAAAAAA"
exp_seq <- "AAAAAAAAAAGAAAAAAAAA"
snp_position <-11
reference_nucleotide <- substr(reference_seq, 11, 11)
exp_nucleotide <- substr(exp_seq, 11, 11)
#use paste to put them together
kind_of_snp <- paste(reference_nucleotide, exp_nucleotide)
#we will create an if statement where we know that the reference nucleotide is supposed to be, but we are going to check first.
#then we create switch statement that will be evaluating the value of kind of SNP.
#if the reference is A and the experimental sample is A then there is no SNP.
#If the reference is A and the experimental is C then it called transversion.
#if we have an A and a G then transition.
#if we have an A and a T then transversion.
if (reference_nucleotide == "A") {
switch (EXPR = kind_of_snp, "A A"="no SNP", "A C"="transversion", "A G"="transition", "A T"="transversion")
}
exp_data <- c(55, 10, 90, 45, 1000)
#we are going to create a variable index and put it in a range from 1 to the length of our experimental data.
#we could go from 1 to 5, but remeber, you never want to hardcode these things because you never know when you're going to need to use the script for something else.
#we will just have it print out (cat)
for(index in 1:length(exp_data)) {
cat(index, exp_data[index], "\n")
}
gene_names <- c("MYC", "SRC", "RGA", "YCAZ", "GAMM")
for(gene in gene_names) {
cat(gene, "\n")
}
gene_names <- c("MYC", "SRC", "RGA", "YCAZ", "GAMM")
for(bread in gene_names) {
cat(bread, "\n")
}
gene_names <- c("MYC", "SRC", "RGA", "YCAZ", "GAMM")
for(gene in gene_names) {
cat(gene, "\n")
}
reference_nucleotides <- c("A", "C", "G", "T")
exp_nucleotides <- c("A","C", "G", "T")
for(ref in reference_nucleotides) {
for(exp in exp_nucleotides) {
cat(ref, exp, if(ref != exp){"SNP"}else{"no SNP"}, "\n")
}
}
index <- 5
while(index < 10) {
cat(index, "\n")
index <- index + 1
}
index <- 5
while(index < 10) {
cat(index, "\n")
index <- index - 1
}
gene_exp_matrix <- matrix(c(1,2,3,4,5,6,7,8,9), nrow = 3, ncol = 3, byrow = FALSE)
apply(gene_exp_matrix , 2, sort, decreasing = TRUE)
replaceThreeLetterNucWithOneLetter <- function(nuc3letter) {
return(switch(EXPR = nuc3letter, "ADE"="A", "CYT"="C", "GUA"="G", "THY"="T"))
}
snp <- replaceThreeLetterNucWithOneLetter("CYT")
snp
snp <- replaceThreeLetterNucWithOneLetter("THY")
snp
codon_to_aminoacid <- function(codon) {
return(switch(EXPR = codon, "TTT"="F", "TTC"="F", "TTA"="L", "TTG"="L", "CTT"="L", "CTC"="L", "CTA"="L", "CTG"="L", "ATT"="I", "ATC"="I", "ATA"="I", "ATG"="M", "GTT"="V", "GTC"="V", "GTA"="V", "GTG"="V", "TCT"="S", "TCC"="S", "TCA"="S", "TCG"="S", "CCT"="P", "CCC"="P", "CCA"="P", "CCG"="P", "ACT"="T", "ACC"="T", "ACA"="T", "ACG"="T", "GCT"="A", "GCC"="A", "GCA"="A", "GCG"="A", "TAT"="Y", "TAC"="Y","CAT"="H", "CAC"="H","CAA"="Q", "CAG"="Q", "AAT"="N", "AAC"="N", "AAA"="K", "AAG"="K", "GAT"="D", "GAC"="D", "GAA"="E", "GAG"="E", "TGT"="C", "TGC"="C", "TGG"="W", "CGT"="R", "CGC"="R", "CGA"="R", "CGG"="R", "AGT"="S", "AGC"="S", "AGA"="R", "AGG"="R", "GGT"="G", "GGC"="G", "GGA"="G", "GGG"="G"))
}
snp <- codon_to_aminoacid("TTT")
snp
translate_dna <-function(dna) {
# check if dna length is multiple of 3
aa <- "ATGCTTTTTGTGTCACCCGCCTATCACAACAAAGATGAATGTTGGCGGAGTAGGGGGTAG"
if(nchar(dna) %% 3 == 0){
}
}
dna <- "ATGCTTTTTGTGTCACCCGCCTATCACAACAAAGATGAATGTTGGCGGAGTAGGGGGTAG"
translate_dna <-function(dna) {
# check if dna length is multiple of 3
aa <- "ATGCTTTTTGTGTCACCCGCCTATCACAACAAAGATGAATGTTGGCGGAGTAGGGGGTAG"
if(nchar(dna) %% 3 == 0){
}
}
dna <- "ATGCTTTTTGTGTCACCCGCCTATCACAACAAAGATGAATGTTGGCGGAGTAGGGGGTAG"
translate_dna <-function(dna) {
# check if dna length is multiple of 3
aa <- ""
if(nchar(dna) %% 3 == 0) {
#write loop to get substrings or codons
for (index in seq(from=1, to=nchar(dna), by=3)) {
#call function to convert codonToAA
#append new AA to growing chain
#      cat(index, substr(dna, index, index+2), "\n)
aa <- paste0(aa, codon_to_aminoacid(substr(dna, index, index+2)))
#      cat(aa, "\n")
}
dna <- "ATGCTTTTTGTGTCACCCGCCTATCACAACAAAGATGAATGTTGGCGGAGTAGGGGGTAG"
translate_dna <-function(dna) {
# check if dna length is multiple of 3
aa <- ""
if(nchar(dna) %% 3 == 0) {
#write loop to get substrings or codons
for (index in seq(from=1, to=nchar(dna), by=3)) {
#call function to convert codonToAA
#append new AA to growing chain
#      cat(index, substr(dna, index, index+2), "\n)
aa <- paste0(aa, codon_to_aminoacid(substr(dna, index, index+2)))
#      cat(aa, "\n")
}
datasets::LakeHuron
x <- c(1875:1972)
x
dim(LakeHuron)
y <- c(1:97)
y
datasets::LakeHuron
x <- c(1875:1972)
x
dim(x)
y <- y[1:97]
y
datasets::LakeHuron
x <- c(1875:1972)
# use the built-in dataset "Insect Sprays".
datasets::InsectSprays
lake_depth <- LakeHuron$[1:97]
lake_depth <- LakeHuron$(1:97)
datasets::LakeHuron
year <- c(1875:1972)
year
data.frame(LakeHuron)
data.frame(year)
lake_depth <- c(data.frame(LakeHuron)[1:98])
lake_depth <- data.frame(LakeHuron)
lake_depth <- data.frame(LakeHuron)
lake_depth
data_set_x_depth <- cbind(data_set_x,lake_depth)
data_set_x
data_set_x <- c(1875:1972)
data_set_x
data_set_x_depth <- cbind(data_set_x,lake_depth)
data_set_x <- c(1, 3, 5, 7, 9, 11)
data_set_y <- c(2, 3, 4, 5, 6, 7)
data_set_xy <- cbind(data_set_x,data_set_y)
data_set_xy
data_set_x_depth
plot(data_set_x_depth)
data_set_x_depth
plot(data_set_x_depth)
plot(data_set_x_depth)
plot(data_set_x_depth, type="p", main="Change of Lake Huron Depth Over Years", sub="Fictitious Data", xlab="year", ylab="lake depth")
x >= y
chickwts
# use the built-in dataset "Insect Sprays".
datasets::InsectSprays
average_per_feed <- c(0,0,0,0,0,0)
chick_weight <- chickwts$weight
chick_weight
barplot(chick_weight)
average_per_feed <- c(0,0,0,0,0,0)
average_per_feed[1] <-mean(chickwts[chickwts$feed=="horsebean",1])
average_per_feed[2] <-mean(chickwts[chickwts$feed=="linseed",1])
average_per_feed[3] <-mean(chickwts[chickwts$feed=="soybean",1])
average_per_feed[4] <-mean(chickwts[chickwts$feed=="sunflower",1])
average_per_feed[5] <-mean(chickwts[chickwts$feed=="meatmeal",1])
average_per_feed[6] <-mean(chickwts[chickwts$feed=="casein",1])
barplot(insect_count)
barplot(chick_weight)
chickwts
chick_weight
barplot(chick_weight)
average_per_feed <- c(0,0,0,0,0,0)
average_per_feed[1] <-mean(chickwts[chickwts$feed=="horsebean",1])
average_per_feed[1]
average_per_feed
average_per_feed[2] <-mean(chickwts[chickwts$feed=="linseed",1])
average_per_feed[3] <-mean(chickwts[chickwts$feed=="soybean",1])
average_per_feed[4] <-mean(chickwts[chickwts$feed=="sunflower",1])
average_per_feed[5] <-mean(chickwts[chickwts$feed=="meatmeal",1])
average_per_feed[6] <-mean(chickwts[chickwts$feed=="casein",1])
average_per_feed
barplot(average_per_feed, horiz = "FALSE", main = "Average Weight of Chickens per Feed", names.arg = c("horsebean", "linseed", "soybean", "sunflower", "meatmeal", "casein"))
barplot(average_per_feed, horiz = "FALSE", main = "Average Weight of Chick Birds per Feed", names.arg = c("horsebean", "linseed", "soybean", "sunflower", "meatmeal", "casein"))
atasets::InsectSprays
datasets::InsectSprays
insect_count <- InsectSprays$count
insect_count
boxplot(InsectSprays$count)
boxplot(count ~ spray, data = InsectSprays, col="lightblue1")
# Number 3
boxplot(chickwts$weight)
boxplot(weight ~ feed, data = chickwts, col="magenta1")
# Number 4
datasets::npk
install.packages("ggplot2")
library(ggplot2)
# access the buil-in dataset called "orange"
datasets::Orange
datasets::npk
qplot(npk$N, npk$P, npk$K, npk$yield)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
# Number 4
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
datasets::npk
qplot(npk$N, npk$P, npk$K, npk$yield)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
datasets::Orange
qplot(Orange$age, Orange$circumference)
orange_tree_plot <- qplot(Orange$age, Orange$circumference)
orange_tree_plot
orange_tree_plot + geom_point(color="blue")
ggplot(data = Orange) +
geom_point(mapping = aes(x=age, y=circumference))
geom_point(mapping = aes(x=age, y=circumference, color = Tree))
ggplot(data = Orange) +
geom_point(mapping = aes(x=age, y=circumference, color = Tree))
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
datasets::npk
qplot(npk$N,npk$yield)
ggplot(data = npk) +
geom_point(mapping = aes(x=block, y=yield))
ggplot(data = npk) +
geom_point(mapping = aes(x=block, y=yield, color = N, P, K))
ggplot(data = npk) +
geom_point(mapping = aes(x=block, y=yield))
# access the buil-in dataset called "orange"
datasets::Orange
ggplot(data = Orange) +
geom_point(mapping = aes(x=age, y=circumference))
# color-code the data by tree
ggplot(data = Orange) +
geom_point(mapping = aes(x=age, y=circumference, color = Tree))
datasets::npk
ggplot(data = npk) +
geom_point(mapping = aes(x=block, y=yield))
ggplot(data = npk) +
geom_point(mapping = aes(x=block, y=yield, color=N, P, K))
# access the buil-in dataset called "orange"
datasets::Orange
# split the data into a series of graphs based on tree.
# use a facetwrap : chosen a facet of the data
ggplot(data = Orange) +
geom_point(mapping = aes(x=age, y=circumference)) +
facet_wrap(~Tree, nrow = 2)
datasets::npk
ggplot(data = npk) +
geom_point(mapping = aes(x=block, y=yield, color=N, color =P, color= K))
ggplot(data = npk) +
geom_point(mapping = aes(x=block, y=yield, color=N))
ggplot(data = npk) +
geom_point(mapping = aes(x=block, y=yield, color=N))
ggplot(npk, aes(x = block, y = yield, col = Clarity)) +
geom_point()
ggplot(data = npk) +
geom_point(mapping = aes(x=block, y=yield, color="N", "P", "K"))
ggplot(data = npk) +
geom_point(mapping = aes(x=block, y=yield, color=))
ggplot(data = npk) +
geom_point(mapping = aes(x=block, y=yield))
ggplot(data = npk) +
geom_point(mapping = aes(x=block, y=yield))
ggplot(data = npk) +
geom_point(mapping = aes(x=block, y=yield, shape=N))
ggplot(data = npk) +
geom_point(mapping = aes(x=block, y=yield, shape=N*P*K))
ggplot(data = npk) +
geom_point(mapping = aes(x=block, y=yield, shape=N*P*K))
dim(npk)
geom_point(mapping = aes(x=block, y=yield, group=interaction(N,P,K))
ggplot(data = npk) +
geom_point(mapping = aes(x=block, y=yield, group=interaction(N,P,K))
ggplot(data = npk) +
geom_point(mapping = aes(x=block, y=yield, group=interaction(N,P,K))
datasets::npk
ggplot(data = npk) +
geom_point(mapping = aes(x=block, y=yield, group=interaction(N,P,K))
datasets::npk
datasets::npk
ggplot(data = npk) +
geom_point(mapping = aes(x=block, y=yield, color=N, shape=P, size=K))
ggplot(data = npk) +
geom_point(mapping = aes(x=block, y=yield, color=N, alpha=P, size=K))
ggplot(data = npk) +
geom_point(mapping = aes(x=block, y=yield, shape=N, shape=P, shape=K))
# access the buil-in dataset called "orange"
datasets::Orange
ggplot(data = Orange, mapping = aes(x=age, y=circumference, color=Tree)) +
geom_point() + geom_line()
codon_to_aminoacid <- function(codon) {
return(switch(EXPR = codon, "TTT"="F", "TTC"="F", "TTA"="L", "TTG"="L", "CTT"="L", "CTC"="L", "CTA"="L", "CTG"="L", "ATT"="I", "ATC"="I", "ATA"="I", "ATG"="M", "GTT"="V", "GTC"="V", "GTA"="V", "GTG"="V", "TCT"="S", "TCC"="S", "TCA"="S", "TCG"="S", "CCT"="P", "CCC"="P", "CCA"="P", "CCG"="P", "ACT"="T", "ACC"="T", "ACA"="T", "ACG"="T", "GCT"="A", "GCC"="A", "GCA"="A", "GCG"="A", "TAT"="Y", "TAC"="Y","CAT"="H", "CAC"="H","CAA"="Q", "CAG"="Q", "AAT"="N", "AAC"="N", "AAA"="K", "AAG"="K", "GAT"="D", "GAC"="D", "GAA"="E", "GAG"="E", "TGT"="C", "TGC"="C", "TGG"="W", "CGT"="R", "CGC"="R", "CGA"="R", "CGG"="R", "AGT"="S", "AGC"="S", "AGA"="R", "AGG"="R", "GGT"="G", "GGC"="G", "GGA"="G", "GGG"="G"))
}
snp <- codon_to_aminoacid("TTT")
snp
ggplot(data = npk) +
geom_point(mapping = aes(x=block, y=yield, shape=3))
ggplot(data = npk) +
geom_point(mapping = aes(x=block, y=yield, labels("N", "P", "K")))
ggplot(data = npk) +
geom_point(mapping = aes(x=block, y=yield, shape=N))
datasets::npk
data.frame(npk)
npk$N
N
npk$P
ggplot(data = npk) +
geom_point(mapping = aes(x=block, y=yield, shape=N, size=P, color=K))
install.packages(c('vegan', 'tidyverse'))
install.packages('reshape')
source("https://bioconductor.org/biocLite.R")
biocLite()
library(vegan)
library(dplyr)
library(tidyr)
library(ggplot2)
library(reshape)
setwd('/Users/arifinabintarti/Documents/apple_replant/')
getwd(wd)
getwd((wd))
setwd('/Users/arifinabintarti/Documents/Parent/apple_replant/')
setwd('/Users/arifinabintarti/Documents/Parent/apple_replant/')
otu <- read.table('Data/otu_table_v2.txt', sep='\t', header=T, row.names = 1)
setwd('/Users/arifinabintarti/Documents/Parent/)
